name: Weekly Metrics Report

on:
  schedule:
    - cron: '0 6 * * 1' # every Monday at 06:00 UTC

jobs:
  metrics:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Gather metrics and update METRICS.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          node -e "
          const https = require('https');
          const fs = require('fs');
          const repo = process.env.REPO;
          const token = process.env.GITHUB_TOKEN;
          const request = (path) => new Promise((res, rej) => {
            const options = { hostname: 'api.github.com', path, method: 'GET', headers: { 'User-Agent': 'metrics-action', 'Authorization': `token ${token}` } };
            const req = https.request(options, r => { let d=''; r.on('data', c=>d+=c); r.on('end', ()=>res(d)); });
            req.on('error', e=>rej(e)); req.end();
          });

          (async () => {
            try {
              const issuesRaw = await request(`/repos/${repo}/issues?labels=tech-debt&state=open&per_page=100`);
              const issues = JSON.parse(issuesRaw || '[]');
              const openTechDebt = issues.length;

              const sinceDate = new Date(Date.now() - 7*24*3600*1000);

              const prsRaw = await request(`/repos/${repo}/pulls?state=closed&per_page=100`);
              const prs = JSON.parse(prsRaw || '[]');
              const mergedPRs = prs.filter(p => p.merged_at && new Date(p.merged_at) > sinceDate);
              const mergedCount = mergedPRs.length;

              const mergeTimes = mergedPRs.map(p => (new Date(p.merged_at) - new Date(p.created_at)));
              const avgMs = mergeTimes.length ? Math.round(mergeTimes.reduce((a,b)=>a+b,0)/mergeTimes.length) : 0;
              const avgDays = avgMs ? (avgMs / (1000*60*60*24)).toFixed(2) : 'n/a';

              let promptAddCount = 0;
              for (const p of mergedPRs) {
                const filesRaw = await request(`/repos/${repo}/pulls/${p.number}/files?per_page=100`);
                const files = JSON.parse(filesRaw || '[]');
                const touched = files.some(f => f.filename === 'CBD_PROMPTS_EXAMPLES.md' || /prompts/i.test(f.filename));
                if (touched) promptAddCount++;
              }

              const content = `# METRICS - Collaboration & Repo Metrics\n\n- Open tech-debt issues: ${openTechDebt}\n- PRs merged last 7 days: ${mergedCount}\n- New prompts changed last 7 days: ${promptAddCount}\n- Average time PR -> merge (days): ${avgDays}\n- Clarifications per prompt (weekly): n/a\n`;
              fs.writeFileSync('CBD_METRICS.md', content);
            } catch (e) {
              console.error(e); process.exit(1);
            }
          })();
        
      - name: Commit metrics
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add CBD_METRICS.md
          git commit -m "chore(metrics): update CBD_METRICS.md [ci skip]" || echo "No changes to commit"
          git push origin HEAD:main
